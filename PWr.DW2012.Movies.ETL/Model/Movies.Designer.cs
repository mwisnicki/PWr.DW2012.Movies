//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Movies", "MovieDirector", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(PWr.DW2012.Movies.Model.Movie), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(PWr.DW2012.Movies.Model.Person), true)]
[assembly: EdmRelationshipAttribute("Movies", "MovieMajorSectionMovieMinorSection", "MovieMajorSection", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(PWr.DW2012.Movies.Model.MovieMajorSection), "MovieMinorSection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(PWr.DW2012.Movies.Model.MovieMinorSection), true)]
[assembly: EdmRelationshipAttribute("Movies", "MovieMinorSectionMovie", "MovieMinorSection", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(PWr.DW2012.Movies.Model.MovieMinorSection), "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(PWr.DW2012.Movies.Model.Movie), true)]
[assembly: EdmRelationshipAttribute("Movies", "MoviePerson", "Movie", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(PWr.DW2012.Movies.Model.Movie), "Person", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(PWr.DW2012.Movies.Model.Person))]

#endregion

namespace PWr.DW2012.Movies.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MoviesContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MoviesContainer object using the connection string found in the 'MoviesContainer' section of the application configuration file.
        /// </summary>
        public MoviesContainer() : base("name=MoviesContainer", "MoviesContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MoviesContainer object.
        /// </summary>
        public MoviesContainer(string connectionString) : base(connectionString, "MoviesContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MoviesContainer object.
        /// </summary>
        public MoviesContainer(EntityConnection connection) : base(connection, "MoviesContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Movie> Movies
        {
            get
            {
                if ((_Movies == null))
                {
                    _Movies = base.CreateObjectSet<Movie>("Movies");
                }
                return _Movies;
            }
        }
        private ObjectSet<Movie> _Movies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Person> People
        {
            get
            {
                if ((_People == null))
                {
                    _People = base.CreateObjectSet<Person>("People");
                }
                return _People;
            }
        }
        private ObjectSet<Person> _People;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MovieMajorSection> MovieMajorSections
        {
            get
            {
                if ((_MovieMajorSections == null))
                {
                    _MovieMajorSections = base.CreateObjectSet<MovieMajorSection>("MovieMajorSections");
                }
                return _MovieMajorSections;
            }
        }
        private ObjectSet<MovieMajorSection> _MovieMajorSections;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MovieMinorSection> MovieMinorSections
        {
            get
            {
                if ((_MovieMinorSections == null))
                {
                    _MovieMinorSections = base.CreateObjectSet<MovieMinorSection>("MovieMinorSections");
                }
                return _MovieMinorSections;
            }
        }
        private ObjectSet<MovieMinorSection> _MovieMinorSections;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Movies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovies(Movie movie)
        {
            base.AddObject("Movies", movie);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the People EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPeople(Person person)
        {
            base.AddObject("People", person);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MovieMajorSections EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovieMajorSections(MovieMajorSection movieMajorSection)
        {
            base.AddObject("MovieMajorSections", movieMajorSection);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MovieMinorSections EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMovieMinorSections(MovieMinorSection movieMinorSection)
        {
            base.AddObject("MovieMinorSections", movieMinorSection);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Movies", Name="Movie")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Movie : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Movie object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="property">Initial value of the Property property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="personId">Initial value of the PersonId property.</param>
        /// <param name="movieMinorSectionName">Initial value of the MovieMinorSectionName property.</param>
        public static Movie CreateMovie(global::System.String id, global::System.String title, global::System.String property, global::System.DateTime year, global::System.String personId, global::System.String movieMinorSectionName)
        {
            Movie movie = new Movie();
            movie.Id = id;
            movie.Title = title;
            movie.Property = property;
            movie.Year = year;
            movie.PersonId = personId;
            movie.MovieMinorSectionName = movieMinorSectionName;
            return movie;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Property
        {
            get
            {
                return _Property;
            }
            set
            {
                OnPropertyChanging(value);
                ReportPropertyChanging("Property");
                _Property = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Property");
                OnPropertyChanged();
            }
        }
        private global::System.String _Property;
        partial void OnPropertyChanging(global::System.String value);
        partial void OnPropertyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.DateTime _Year;
        partial void OnYearChanging(global::System.DateTime value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PersonId
        {
            get
            {
                return _PersonId;
            }
            set
            {
                OnPersonIdChanging(value);
                ReportPropertyChanging("PersonId");
                _PersonId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PersonId");
                OnPersonIdChanged();
            }
        }
        private global::System.String _PersonId;
        partial void OnPersonIdChanging(global::System.String value);
        partial void OnPersonIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MovieMinorSectionName
        {
            get
            {
                return _MovieMinorSectionName;
            }
            set
            {
                OnMovieMinorSectionNameChanging(value);
                ReportPropertyChanging("MovieMinorSectionName");
                _MovieMinorSectionName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MovieMinorSectionName");
                OnMovieMinorSectionNameChanged();
            }
        }
        private global::System.String _MovieMinorSectionName;
        partial void OnMovieMinorSectionNameChanging(global::System.String value);
        partial void OnMovieMinorSectionNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MovieDirector", "Person")]
        public Person Director
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("Movies.MovieDirector", "Person").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("Movies.MovieDirector", "Person").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Person> DirectorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Person>("Movies.MovieDirector", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Person>("Movies.MovieDirector", "Person", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MovieMinorSectionMovie", "MovieMinorSection")]
        public MovieMinorSection MinorSection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieMinorSection>("Movies.MovieMinorSectionMovie", "MovieMinorSection").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieMinorSection>("Movies.MovieMinorSectionMovie", "MovieMinorSection").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MovieMinorSection> MinorSectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieMinorSection>("Movies.MovieMinorSectionMovie", "MovieMinorSection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MovieMinorSection>("Movies.MovieMinorSectionMovie", "MovieMinorSection", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MoviePerson", "Person")]
        public EntityCollection<Person> Producers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Person>("Movies.MoviePerson", "Person");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Person>("Movies.MoviePerson", "Person", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Movies", Name="MovieMajorSection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MovieMajorSection : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MovieMajorSection object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static MovieMajorSection CreateMovieMajorSection(global::System.String name, global::System.String description)
        {
            MovieMajorSection movieMajorSection = new MovieMajorSection();
            movieMajorSection.Name = name;
            movieMajorSection.Description = description;
            return movieMajorSection;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MovieMajorSectionMovieMinorSection", "MovieMinorSection")]
        public EntityCollection<MovieMinorSection> MinorSections
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MovieMinorSection>("Movies.MovieMajorSectionMovieMinorSection", "MovieMinorSection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MovieMinorSection>("Movies.MovieMajorSectionMovieMinorSection", "MovieMinorSection", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Movies", Name="MovieMinorSection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MovieMinorSection : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MovieMinorSection object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="movieMajorSectionName">Initial value of the MovieMajorSectionName property.</param>
        public static MovieMinorSection CreateMovieMinorSection(global::System.String name, global::System.String description, global::System.String movieMajorSectionName)
        {
            MovieMinorSection movieMinorSection = new MovieMinorSection();
            movieMinorSection.Name = name;
            movieMinorSection.Description = description;
            movieMinorSection.MovieMajorSectionName = movieMajorSectionName;
            return movieMinorSection;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MovieMajorSectionName
        {
            get
            {
                return _MovieMajorSectionName;
            }
            set
            {
                OnMovieMajorSectionNameChanging(value);
                ReportPropertyChanging("MovieMajorSectionName");
                _MovieMajorSectionName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MovieMajorSectionName");
                OnMovieMajorSectionNameChanged();
            }
        }
        private global::System.String _MovieMajorSectionName;
        partial void OnMovieMajorSectionNameChanging(global::System.String value);
        partial void OnMovieMajorSectionNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MovieMajorSectionMovieMinorSection", "MovieMajorSection")]
        public MovieMajorSection MajorSection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieMajorSection>("Movies.MovieMajorSectionMovieMinorSection", "MovieMajorSection").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieMajorSection>("Movies.MovieMajorSectionMovieMinorSection", "MovieMajorSection").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MovieMajorSection> MajorSectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MovieMajorSection>("Movies.MovieMajorSectionMovieMinorSection", "MovieMajorSection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MovieMajorSection>("Movies.MovieMajorSectionMovieMinorSection", "MovieMajorSection", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MovieMinorSectionMovie", "Movie")]
        public EntityCollection<Movie> Movies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Movies.MovieMinorSectionMovie", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Movies.MovieMinorSectionMovie", "Movie", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Movies", Name="Person")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Person : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Person object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isApproxSpelling">Initial value of the IsApproxSpelling property.</param>
        public static Person CreatePerson(global::System.String id, global::System.Boolean isApproxSpelling)
        {
            Person person = new Person();
            person.Id = id;
            person.IsApproxSpelling = isApproxSpelling;
            return person;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.String _Id;
        partial void OnIdChanging(global::System.String value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsApproxSpelling
        {
            get
            {
                return _IsApproxSpelling;
            }
            set
            {
                OnIsApproxSpellingChanging(value);
                ReportPropertyChanging("IsApproxSpelling");
                _IsApproxSpelling = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsApproxSpelling");
                OnIsApproxSpellingChanged();
            }
        }
        private global::System.Boolean _IsApproxSpelling;
        partial void OnIsApproxSpellingChanging(global::System.Boolean value);
        partial void OnIsApproxSpellingChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MovieDirector", "Movie")]
        public EntityCollection<Movie> DirectedMovies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Movies.MovieDirector", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Movies.MovieDirector", "Movie", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Movies", "MoviePerson", "Movie")]
        public EntityCollection<Movie> ProducedMovies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Movie>("Movies.MoviePerson", "Movie");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Movie>("Movies.MoviePerson", "Movie", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
